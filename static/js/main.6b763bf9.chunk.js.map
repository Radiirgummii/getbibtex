{"version":3,"sources":["generateCitation.ts","App.js","reportWebVitals.js","index.js"],"names":["bibtexFromEntryData","entryData","currentDate","moment","format","title","website","replace","citekey","parseResult","parseDomain","type","ParseResultType","Listed","domain","words","split","firstWords","numWords","i","length","charAt","toUpperCase","slice","firstWordsFromTitle","createCiteKey","author","url","domainFromUrl","match","getCitation","a","process","proxyUrl","urlMetadata","then","metadata","App","useState","setUrl","bibtexEntry","setBibtexEntry","copy","useClipboard","loading","setLoading","copied","setCopied","useEffect","timer","setTimeout","clearTimeout","y","style","marginBottom","justify","span","maxWidth","h1","label","h4","placeholder","width","value","onChange","e","target","onClick","bibtex","console","log","className","position","minHeight","top","right","zIndex","borderColor","padding","iconRight","color","auto","size","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6b763bf9.chunk.js","sourcesContent":["import urlMetadata from 'url-metadata'\nimport {parseDomain, ParseResultType} from \"parse-domain\";\nimport moment from 'moment'\n\ninterface EntryData {\n    title: string,\n    author: string,\n    url: string,\n    website: string,\n}\n\nfunction firstWordsFromTitle(title: string): string {\n    let words = title.split(\" \")\n    let firstWords = \"\"\n    let numWords = 0\n    for (const i in title.split(\" \")) {\n        if (words[i].length >= 4 && numWords < 2) {\n            firstWords = firstWords + words[i].charAt(0).toUpperCase() + words[i].slice(1) // capitalize first letter in word\n            numWords += 1\n        }\n    }\n    return firstWords\n}\n\nfunction createCiteKey(entryData: EntryData): string {\n    let citekey: string = \"\"\n    const parseResult = parseDomain(entryData.website)\n    if (parseResult.type === ParseResultType.Listed) {  // this fails. Why?\n        const { domain } = parseResult\n        citekey = \"\" + domain\n    }\n    citekey = citekey + firstWordsFromTitle(entryData.title)\n    citekey = citekey.replace(/\\W/g, '') // remove non-alphanumeric characters\n    return citekey\n}\n\nfunction bibtexFromEntryData(entryData: EntryData): string {\n    // TODO: check if there are no invalid characters for bibtex\n    const currentDate = moment().format(\"DD-MMM-YYYY\")\n    const title = upperLettersInBibTex(`${entryData.title} --- ${entryData.website}`)\n    let bibtex: string = `@misc{${createCiteKey(entryData)},\n\\tauthor = {${entryData.author}},\n\\ttitle = {${title}},\n\\thowpublished = {\\\\url{${entryData.url}}},\n\\tyear = {},\n\\tnote = {[Accessed ${currentDate}]},\n}`\n    return bibtex\n}\n\nfunction upperLettersInBibTex(str: string): string {\n    return str.replace(/([A-Z])/g, '{$1}')\n}\n\nfunction domainFromUrl(url: string): string {\n    // based on regular expression https://regex101.com/r/MOIFTy/3\n    const domainRegex = /^(?:https?:)?(?:\\/\\/)?(?:[^@\\n]+@)?(?:www\\.)?([^:/\\n]+)/\n    const match = url.match(domainRegex)\n    let domain: string = ''\n    if (match != null) {\n        domain = match[1]\n    }\n    return domain\n}\n\n\nconst getCitation = async (url: string) => {\n    const proxyServerUrl = process.env.REACT_APP_BACKEND_URL || 'http://localhost:8080/'\n    const proxyUrl = proxyServerUrl+url\n    return urlMetadata(proxyUrl).then(\n    metadata => { // success handler\n        const domain = domainFromUrl(url)\n        const entryData: EntryData = {\n            title: metadata.title,\n            author: metadata.author,\n            url: url,\n            website: domain,\n        }\n        return entryData\n    },\n    ).then(\n        entryData => {\n            let bibtex: string = bibtexFromEntryData(entryData)\n            return bibtex\n        }\n    )\n}\n\nexport { getCitation }","import './App.css'\nimport { GeistProvider, CssBaseline, useClipboard } from '@geist-ui/react'\nimport { Row, Col, Input, Spacer, Button, Textarea, Text, Note } from '@geist-ui/react'\nimport { useEffect, useState } from 'react'\nimport { getCitation } from './generateCitation'\nimport { Copy, Check } from '@geist-ui/react-icons'\n\nconst App = () => {\n  const [url, setUrl] = useState('')\n  const [bibtexEntry, setBibtexEntry] = useState('')\n  const { copy } = useClipboard()\n  const [loading, setLoading] = useState(false)\n  const [copied, setCopied] = useState(false)\n\n  const handleUrlChange = (e) => {\n    setUrl(e.target.value)\n  }\n\n  const handleButtonClicked = (e) => {\n    setLoading(true)\n    getCitation(url, setBibtexEntry).then(bibtex => {\n      console.log(\"Returned BiBtex\", bibtex)\n      setBibtexEntry(bibtex)\n      setLoading(false)  // will this work on error promise?\n    })\n  }\n\n  const handleCopyClicked = () => {\n    copy(bibtexEntry)\n    // set checkmark in button\n    setCopied(true)\n  }\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setCopied(false)\n    }, 1500)\n    return () => clearTimeout(timer)\n  }, [copied])\n\n  return (\n    <GeistProvider>\n      <CssBaseline />\n        <Spacer y={1}/>\n        <Row style={{ marginBottom: '15px'}} justify=\"center\">\n          <Col span={22} justify=\"center\" style={{maxWidth: '38em'}}>\n            <Text h1>BibTex generator from URL</Text>\n            <Note label=\"IMPORTANT NOTE\" type=\"warning\">Most educators and professionals do not consider it appropriate to use tertiary sources such as encyclopedias as a sole source for any informationâ€”citing an encyclopedia as an important reference in footnotes or bibliographies may result in censure or a failing grade. Wikipedia articles should be used for background information, as a reference for correct terminology and search terms, and as a starting point for further research.</Note>\n            <Spacer y={2} />\n            <Text h4>Enter the URL below: </Text>\n            <Input placeholder=\"URL to website/article\" width=\"100%\" value={url} onChange={handleUrlChange} />\n            <Spacer y={.5} />\n            <Row justify=\"center\">\n              <Button loading={loading} onClick={handleButtonClicked} type=\"secondary\" style={{width: '100%'}}>Generate BibTex entry</Button>\n            </Row>\n            <Spacer y={.5} />\n            <div className='output' style={{position: 'relative'}}>\n            <Textarea placeholder=\"\" width=\"100%\" minHeight=\"23em\" value={bibtexEntry} />\n            <Button style={{position: 'absolute', top: '5px', right: '5px', zIndex: 33, borderColor: copied ? 'green' : '', padding: '0 0.5rem'}} iconRight={copied ? <Check color='green' /> : <Copy /> } auto size=\"small\" onClick={handleCopyClicked}></Button>\n            </div>\n          </Col>\n        </Row>\n    </GeistProvider>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}